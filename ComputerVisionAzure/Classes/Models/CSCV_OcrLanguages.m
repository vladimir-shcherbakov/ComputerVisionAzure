/**
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

#import "CSCV_OcrLanguages.h"

/**
 * Defines values for CSCV_OcrLanguages.
 */
@implementation CSCV_OcrLanguages
+ (NSArray*)values {
    static NSArray *allValues;
    static dispatch_once_t onceToken;
    dispatch_once(&onceToken, ^{
        allValues = @[
            @"unk",
            @"zh-Hans",
            @"zh-Hant",
            @"cs",
            @"da",
            @"nl",
            @"en",
            @"fi",
            @"fr",
            @"de",
            @"el",
            @"hu",
            @"it",
            @"ja",
            @"ko",
            @"nb",
            @"pl",
            @"pt",
            @"ru",
            @"es",
            @"sv",
            @"tr",
            @"ar",
            @"ro",
            @"sr-Cyrl",
            @"sr-Latn",
            @"sk"
        ];
    });
    return allValues;
}
/** Enum value unk. */
+ (CSCV_OcrLanguages*)UNK {
    return [CSCV_OcrLanguages values][0];
}
/** Enum value zh-Hans. */
+ (CSCV_OcrLanguages*)ZH_HANS {
    return [CSCV_OcrLanguages values][1];
}
/** Enum value zh-Hant. */
+ (CSCV_OcrLanguages*)ZH_HANT {
    return [CSCV_OcrLanguages values][2];
}
/** Enum value cs. */
+ (CSCV_OcrLanguages*)CS {
    return [CSCV_OcrLanguages values][3];
}
/** Enum value da. */
+ (CSCV_OcrLanguages*)DA {
    return [CSCV_OcrLanguages values][4];
}
/** Enum value nl. */
+ (CSCV_OcrLanguages*)NL {
    return [CSCV_OcrLanguages values][5];
}
/** Enum value en. */
+ (CSCV_OcrLanguages*)EN {
    return [CSCV_OcrLanguages values][6];
}
/** Enum value fi. */
+ (CSCV_OcrLanguages*)FI {
    return [CSCV_OcrLanguages values][7];
}
/** Enum value fr. */
+ (CSCV_OcrLanguages*)FR {
    return [CSCV_OcrLanguages values][8];
}
/** Enum value de. */
+ (CSCV_OcrLanguages*)DE {
    return [CSCV_OcrLanguages values][9];
}
/** Enum value el. */
+ (CSCV_OcrLanguages*)EL {
    return [CSCV_OcrLanguages values][10];
}
/** Enum value hu. */
+ (CSCV_OcrLanguages*)HU {
    return [CSCV_OcrLanguages values][11];
}
/** Enum value it. */
+ (CSCV_OcrLanguages*)IT {
    return [CSCV_OcrLanguages values][12];
}
/** Enum value ja. */
+ (CSCV_OcrLanguages*)JA {
    return [CSCV_OcrLanguages values][13];
}
/** Enum value ko. */
+ (CSCV_OcrLanguages*)KO {
    return [CSCV_OcrLanguages values][14];
}
/** Enum value nb. */
+ (CSCV_OcrLanguages*)NB {
    return [CSCV_OcrLanguages values][15];
}
/** Enum value pl. */
+ (CSCV_OcrLanguages*)PL {
    return [CSCV_OcrLanguages values][16];
}
/** Enum value pt. */
+ (CSCV_OcrLanguages*)PT {
    return [CSCV_OcrLanguages values][17];
}
/** Enum value ru. */
+ (CSCV_OcrLanguages*)RU {
    return [CSCV_OcrLanguages values][18];
}
/** Enum value es. */
+ (CSCV_OcrLanguages*)ES {
    return [CSCV_OcrLanguages values][19];
}
/** Enum value sv. */
+ (CSCV_OcrLanguages*)SV {
    return [CSCV_OcrLanguages values][20];
}
/** Enum value tr. */
+ (CSCV_OcrLanguages*)TR {
    return [CSCV_OcrLanguages values][21];
}
/** Enum value ar. */
+ (CSCV_OcrLanguages*)AR {
    return [CSCV_OcrLanguages values][22];
}
/** Enum value ro. */
+ (CSCV_OcrLanguages*)RO {
    return [CSCV_OcrLanguages values][23];
}
/** Enum value sr-Cyrl. */
+ (CSCV_OcrLanguages*)SR_CYRL {
    return [CSCV_OcrLanguages values][24];
}
/** Enum value sr-Latn. */
+ (CSCV_OcrLanguages*)SR_LATN {
    return [CSCV_OcrLanguages values][25];
}
/** Enum value sk. */
+ (CSCV_OcrLanguages*)SK {
    return [CSCV_OcrLanguages values][26];
}
+ (CSCV_OcrLanguages *)fromString:(NSString *)string {
    if (![[CSCV_OcrLanguages values]containsObject:string]) {
        @throw [NSException exceptionWithName:@"EnumCastException" reason:@"The string is not the enum member" userInfo:nil];
    }
    return (CSCV_OcrLanguages *)string;
}
+ (NSString *)toStringValue:(CSCV_OcrLanguages *)value {
    if (![[CSCV_OcrLanguages values]containsObject:value]) {
        @throw [NSException exceptionWithName:@"EnumCastException" reason:@"Enum value doesn't exist" userInfo:nil];
    }
    return (NSString *)value;
}
@end
